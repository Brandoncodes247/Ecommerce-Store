version: '3.8'

services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_KRAFT_MODE=true
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - ecommerce

  db:
    image: postgres
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=BABY_rhine32
      - POSTGRES_USER=db-ian
      - POSTGRES_DB=ecommerce
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    hostname: db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U db-ian -d ecommerce"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    container_name: nest-pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
    ports:
      - '5050:80'
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ecommerce

  gateway:
    build: ./gateway
    restart: always
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    hostname: gateway
    env_file:
      - .env
    ports:
      - "3000:3000"
    networks:
      - ecommerce

  order:
    build: ./order
    restart: always
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - ecommerce

  inventory:
    build: ./inventory
    restart: always
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - ecommerce

  payment:
    build: ./payment
    restart: always
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - ecommerce

  product:
    build: ./product
    restart: always
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - ecommerce

volumes:
  kafka_data:

networks:
  ecommerce:
    driver: bridge